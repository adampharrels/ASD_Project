# Azure Pipeline for Spring Boot Room Booking System
# Builds, tests, and validates the application

trigger:
- main
- Martin

pool:
  vmImage: ubuntu-latest

variables:
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

steps:
# Set up Java environment
- script: |
    # Check if Java 21 is available
    java -version
    javac -version
    echo "JAVA_HOME: $JAVA_HOME"
  displayName: 'Check Java version'

# Install JDK 21 if needed
- bash: |
    if ! java -version 2>&1 | grep -q "21"; then
      echo "Installing OpenJDK 21..."
      sudo apt-get update
      sudo apt-get install -y openjdk-21-jdk
      export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
      echo "##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME"
      echo "##vso[task.setvariable variable=PATH]$JAVA_HOME/bin:$PATH"
    else
      # Set JAVA_HOME even if Java 21 is already installed
      export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
      echo "##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME"
      echo "##vso[task.setvariable variable=PATH]$JAVA_HOME/bin:$PATH"
    fi
    echo "JAVA_HOME set to: $JAVA_HOME"
    java -version
  displayName: 'Set up JDK 21'

# Cache Gradle dependencies
- task: Cache@2
  displayName: 'Cache Gradle dependencies'
  inputs:
    key: 'gradle | "$(Agent.OS)" | **/gradle-wrapper.properties'
    path: $(GRADLE_USER_HOME)

# Run unit tests with detailed reporting
- script: |
    if [ -f "gradlew" ]; then
      chmod +x gradlew
      echo "gradlew is now executable"
    else
      echo "gradlew file not found in repository!"
      exit 1
    fi
  displayName: 'Make gradlew executable'

# Verify environment before build
- script: |
    echo "=== Environment Verification ==="
    echo "JAVA_HOME: $JAVA_HOME"
    echo "PATH: $PATH"
    echo "Java version:"
    java -version
    echo "Gradle wrapper version:"
    ./gradlew --version
    echo "Current directory contents:"
    ls -la
  displayName: 'Verify build environment'

# Clean and compile the project
- script: ./gradlew clean compileJava
  displayName: 'Clean and compile Java code'

# Run unit tests with detailed reporting
- script: |
    echo "=== Starting Unit Test Execution ==="
    echo "Test configuration:"
    echo "- Total test classes: 5 (BookingTest, AppTest, AppIntegrationTest, CalendarServiceTest, AccountTest)"
    echo "- Expected total tests: 22+ (including AccountTest)"
    echo "- Test frameworks: JUnit 5, Mockito, Spring Test"
    echo ""
    
    # Run tests with detailed output and continue on failure
    ./gradlew clean test --info --continue
    
    echo ""
    echo "=== Test Execution Summary ==="
    if [ -f "build/test-results/test/TEST-*.xml" ]; then
      echo "Test result files generated successfully"
      # Count total tests from XML files
      TOTAL_TESTS=$(grep -h "tests=" build/test-results/test/TEST-*.xml | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
      FAILED_TESTS=$(grep -h "failures=" build/test-results/test/TEST-*.xml | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
      echo "Total tests executed: $TOTAL_TESTS"
      echo "Failed tests: $FAILED_TESTS"
      
      if [ "$FAILED_TESTS" -gt 0 ]; then
        echo "‚ö†Ô∏è  WARNING: $FAILED_TESTS test(s) failed!"
      else
        echo "‚úÖ All tests passed successfully!"
      fi
    else
      echo "‚ùå ERROR: No test result files found"
    fi
    
  displayName: 'Run comprehensive unit tests'
  continueOnError: false
# Validate test coverage and results
- script: |
    echo "=== Test Coverage Analysis ==="
    # Check if all expected test classes ran
    EXPECTED_CLASSES=("BookingTest" "AppTest" "AppIntegrationTest" "CalendarServiceTest" "AccountTest")
    
    for class in "${EXPECTED_CLASSES[@]}"; do
      if [ -f "build/test-results/test/TEST-com.calendar.${class}.xml" ]; then
        TESTS_IN_CLASS=$(grep "tests=" "build/test-results/test/TEST-com.calendar.${class}.xml" | sed 's/.*tests="\([0-9]*\)".*/\1/')
        echo "‚úÖ $class: $TESTS_IN_CLASS tests executed"
      else
        echo "‚ùå $class: Test results not found"
      fi
    done
    
    echo ""
    echo "=== Test Layer Coverage Verification ==="
    echo "‚úÖ Model Layer: BookingTest (data validation)"
    echo "‚úÖ Controller Layer: AppTest (REST API with MockMvc)"
    echo "‚úÖ Service Layer: CalendarServiceTest (business logic)"
    echo "‚úÖ Integration Layer: AppIntegrationTest (full stack)"
  displayName: 'Validate test coverage'
  condition: succeededOrFailed()

# Publish comprehensive test results
- task: PublishTestResults@2
  displayName: 'Publish detailed test results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/build/test-results/test/*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: 'Room Booking System Unit Tests'
    buildConfiguration: '$(BuildConfiguration)'
    buildPlatform: '$(BuildPlatform)'

# Copy comprehensive test reports and coverage to artifacts
- task: CopyFiles@2
  displayName: 'Copy test reports and coverage'
  condition: succeededOrFailed()
  inputs:
    contents: |
      **/build/reports/tests/**
      **/build/test-results/**
    targetFolder: '$(Build.ArtifactStagingDirectory)/test-artifacts'
    flattenFolders: false
  continueOnError: true

# Code Coverage disabled - JaCoCo removed
# - task: PublishCodeCoverageResults@1

# Generate comprehensive test and coverage summary report
- script: |
    echo "=== Generating Test & Coverage Summary Report ==="
    mkdir -p $(Build.ArtifactStagingDirectory)/test-summary
    
    # Create detailed test summary
    cat > $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md << EOF
    # Unit Test Summary Report
    
    **Build:** $(Build.BuildNumber)  
    **Date:** $(date)  
    **Branch:** $(Build.SourceBranchName)  
    
    ## Test Suite Overview
    - **Total Test Classes:** 5
    - **Total Tests:** 22+ (including AccountTest)
    - **Test Frameworks:** JUnit 5, Mockito, Spring Test
    - **Coverage Tool:** None (JaCoCo removed)
    - **Database:** H2 in-memory for integration tests
    
    
    ## My Contribution
    - **AccountTest**: Custom unit test for account creation and login logic (see app/src/test/java/uni/space/finder/AccountTest.java).
    
    ## Test Coverage by Layer
    1. **Model Layer** (BookingTest): Data validation and integrity
    2. **Account Logic** (AccountTest): Account creation and login validation
    3. **Controller Layer** (AppTest): REST API functionality with MockMvc  
    4. **Service Layer** (CalendarServiceTest): Business logic and database operations
    5. **Integration Layer** (AppIntegrationTest): Full stack end-to-end testing
    EOF
    
    # Add test results information
    echo "" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
    echo "## Test Results" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
    
    # Add test results to summary
    if [ -d "build/test-results/test" ]; then
      echo "### Execution Details" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
      for xml_file in build/test-results/test/TEST-*.xml; do
        if [ -f "$xml_file" ]; then
          CLASS_NAME=$(basename "$xml_file" .xml | sed 's/TEST-com.calendar.//')
          TESTS=$(grep "tests=" "$xml_file" | sed 's/.*tests="\([0-9]*\)".*/\1/')
          FAILURES=$(grep "failures=" "$xml_file" | sed 's/.*failures="\([0-9]*\)".*/\1/')
          TIME=$(grep "time=" "$xml_file" | sed 's/.*time="\([0-9.]*\)".*/\1/')
          
          if [ "$FAILURES" -eq 0 ]; then
            STATUS="‚úÖ PASSED"
          else
            STATUS="‚ùå FAILED"
          fi
          
          echo "- **$CLASS_NAME**: $TESTS tests, $STATUS ($TIME seconds)" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
        fi
      done
    fi
    
    echo "" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
    echo "## Available Reports" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
    echo "- [üß™ Test Report (HTML)](test-artifacts/build/reports/tests/test/index.html)" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
    echo "- [üì¶ Build Artifacts](room-booking-app)" >> $(Build.ArtifactStagingDirectory)/test-summary/test-coverage-summary.md
    
    echo "Test summary report generated successfully"
  displayName: 'Generate test summary'
  condition: succeededOrFailed()

# Build the application JAR
- script: ./gradlew build -x test
  displayName: 'Build application JAR'

# Copy JAR to staging directory
- task: CopyFiles@2
  displayName: 'Copy JAR files'
  inputs:
    contents: '**/build/libs/*.jar'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

# Publish build artifacts including test reports
- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts and test reports'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'room-booking-app'

# Test failure notification and summary
- script: |
    echo "=== üîç TEST FAILURE ANALYSIS ==="
    
    if [ -d "build/test-results/test" ]; then
      FAILED_TESTS=$(grep -h "failures=" build/test-results/test/TEST-*.xml | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
      
      if [ "$FAILED_TESTS" -gt 0 ]; then
        echo "‚ùå CRITICAL: $FAILED_TESTS test(s) failed!"
        echo ""
        echo "Failed test details:"
        
        for xml_file in build/test-results/test/TEST-*.xml; do
          if [ -f "$xml_file" ]; then
            FAILURES=$(grep "failures=" "$xml_file" | sed 's/.*failures="\([0-9]*\)".*/\1/')
            if [ "$FAILURES" -gt 0 ]; then
              CLASS_NAME=$(basename "$xml_file" .xml | sed 's/TEST-com.calendar.//')
              echo "  üî¥ $CLASS_NAME: $FAILURES failure(s)"
              
              # Extract failure details if available
              if command -v xmllint >/dev/null 2>&1; then
                echo "    Failure details:"
                xmllint --xpath "//failure/@message" "$xml_file" 2>/dev/null | sed 's/message="//g' | sed 's/"//g' | sed 's/^/      /'
              fi
            fi
          fi
        done
        
        echo ""
        echo "üîß NEXT STEPS:"
        echo "1. Check the detailed test report in artifacts"
        echo "2. Review test failure logs above"
        echo "3. Fix failing tests before merging"
        echo "4. Re-run the pipeline after fixes"
        
        # This will cause the step to fail but not stop the pipeline
        exit 1
      else
        echo "‚úÖ All tests passed successfully!"
        echo "üéâ No test failures detected. Ready for deployment!"
      fi
    else
      echo "‚ö†Ô∏è  WARNING: No test results found to analyze"
      exit 1
    fi
  displayName: 'Analyze test failures'
  condition: succeededOrFailed()
  continueOnError: true

# Code quality check (optional)
- script: ./gradlew check
  displayName: 'Run code quality checks'
  continueOnError: true

# Display comprehensive build and test summary
- script: |
    echo "=== üéØ COMPREHENSIVE BUILD & TEST SUMMARY ==="
    echo "Build Number: $(Build.BuildNumber)"
    echo "Build ID: $(Build.BuildId)"
    echo "Source Branch: $(Build.SourceBranchName)"
    echo "Java Version: $(java -version 2>&1 | head -1)"
    echo "Gradle Version: $(./gradlew --version | grep Gradle)"
    echo ""
    
    echo "=== üìä TEST EXECUTION RESULTS ==="
    if [ -d "build/test-results/test" ]; then
      TOTAL_TESTS=0
      TOTAL_FAILURES=0
      
      echo "Individual Test Class Results:"
      for xml_file in build/test-results/test/TEST-*.xml; do
        if [ -f "$xml_file" ]; then
          CLASS_NAME=$(basename "$xml_file" .xml | sed 's/TEST-com.calendar.//')
          TESTS=$(grep "tests=" "$xml_file" | sed 's/.*tests="\([0-9]*\)".*/\1/')
          FAILURES=$(grep "failures=" "$xml_file" | sed 's/.*failures="\([0-9]*\)".*/\1/')
          TIME=$(grep "time=" "$xml_file" | sed 's/.*time="\([0-9.]*\)".*/\1/')
          
          TOTAL_TESTS=$((TOTAL_TESTS + TESTS))
          TOTAL_FAILURES=$((TOTAL_FAILURES + FAILURES))
          
          if [ "$FAILURES" -eq 0 ]; then
            echo "  ‚úÖ $CLASS_NAME: $TESTS tests passed ($TIME s)"
          else
            echo "  ‚ùå $CLASS_NAME: $FAILURES/$TESTS tests failed ($TIME s)"
          fi
        fi
      done
      
      echo ""
      echo "üìà OVERALL TEST METRICS:"
      echo "  ‚Ä¢ Total Tests Executed: $TOTAL_TESTS"
      echo "  ‚Ä¢ Total Failures: $TOTAL_FAILURES"
      echo "  ‚Ä¢ Success Rate: $(( (TOTAL_TESTS - TOTAL_FAILURES) * 100 / TOTAL_TESTS ))%"
      
      if [ "$TOTAL_FAILURES" -eq 0 ]; then
        echo "  üéâ ALL TESTS PASSED! üéâ"
      else
        echo "  ‚ö†Ô∏è  $TOTAL_FAILURES TEST(S) FAILED!"
      fi
    else
      echo "‚ùå No test results found"
    fi
    
    echo ""
    echo "=== üìä CODE COVERAGE SUMMARY ==="
    echo "  ‚ÑπÔ∏è  Code coverage disabled (JaCoCo removed)"
    
    echo ""
    echo "=== üì¶ BUILD ARTIFACTS ==="
    if [ -d "build/libs" ]; then
      echo "JAR files generated:"
      ls -la build/libs/ | grep -E "\.(jar|war)$" | awk '{print "  üìÑ " $9 " (" $5 " bytes)"}'
    else
      echo "‚ùå No JAR files found"
    fi
    
    echo ""
    echo "=== üìã AVAILABLE REPORTS ==="
    if [ -d "build/reports/tests/test" ]; then
      echo "  üìä Test Report: build/reports/tests/test/index.html"
    fi
    echo "  üìÑ Test Summary: Available in build artifacts"
    echo "  üîç Detailed Logs: Available in Azure DevOps"
    
    echo ""
    echo "=== ‚úÖ BUILD COMPLETION STATUS ==="
    echo "Build Status: SUCCESS ‚úÖ"
    echo "Timestamp: $(date)"
    echo "Ready for deployment! üöÄ"
  displayName: 'Comprehensive build and test summary'
  condition: succeeded()