# Azure Pipeline for Spring Boot Room Booking System
# Builds, tests, and validates the application

trigger:
- main
- Martin

pool:
  vmImage: ubuntu-latest

variables:
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

steps:
# Set up Java environment
- script: |
    # Check if Java 21 is available
    java -version
    javac -version
    echo "JAVA_HOME: $JAVA_HOME"
  displayName: 'Check Java version'

# Install JDK 21 if needed
- bash: |
    if ! java -version 2>&1 | grep -q "21"; then
      echo "Installing OpenJDK 21..."
      sudo apt-get update
      sudo apt-get install -y openjdk-21-jdk
      export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
      echo "##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME"
      echo "##vso[task.setvariable variable=PATH]$JAVA_HOME/bin:$PATH"
    fi
    java -version
  displayName: 'Set up JDK 21'

# Cache Gradle dependencies
- task: Cache@2
  displayName: 'Cache Gradle dependencies'
  inputs:
    key: 'gradle | "$(Agent.OS)" | **/build.gradle'
    restoreKeys: |
      gradle | "$(Agent.OS)"
      gradle
    path: $(GRADLE_USER_HOME)

# Make gradlew executable
- script: |
    if [ -f "gradlew" ]; then
      chmod +x gradlew
      echo "gradlew is now executable"
    else
      echo "gradlew file not found in repository!"
      exit 1
    fi
  displayName: 'Make gradlew executable'

# Clean and compile the project
- script: ./gradlew clean compileJava
  displayName: 'Clean and compile Java code'

# Run unit tests
- script: ./gradlew test
  displayName: 'Run unit tests'
  continueOnError: true

# Publish test results
- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/build/test-results/test/*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: false

# Generate test report
- script: ./gradlew testReport
  displayName: 'Generate test report'
  continueOnError: true

# Build the application JAR
- script: ./gradlew build -x test
  displayName: 'Build application JAR'

# Copy JAR to staging directory
- task: CopyFiles@2
  displayName: 'Copy JAR files'
  inputs:
    contents: '**/build/libs/*.jar'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

# Publish build artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'room-booking-app'

# Code quality check (optional)
- script: ./gradlew check
  displayName: 'Run code quality checks'
  continueOnError: true

# Display build summary
- script: |
    echo "=== Build Summary ==="
    echo "Java Version: $(java -version 2>&1 | head -1)"
    echo "Gradle Version: $(./gradlew --version | grep Gradle)"
    echo "Build Status: Success"
    ls -la build/libs/
  displayName: 'Build summary'
  condition: succeeded()